{"ast":null,"code":"var _jsxFileName = \"/home/brenomatias/trybe-exercises/block12-react-components-states/dia_1/pokedex-with-state/src/Pokedex.js\";\nimport React from 'react';\nimport Pokemon from './Pokemon';\nimport Button from './Button';\nimport './pokedex.css'; //The JavaScript this keyword refers to the object it belongs to.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Pokedex extends React.Component {\n  constructor(props) {\n    // Typically, in React constructors are only used for two purposes:\n    //Initializing local state by assigning an object to this.state.\n    //Binding event handler methods to an instance.\n    super(props); //  you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor\n\n    this.state = {\n      pokemonIndex: 0,\n      filteredType: 'all'\n    }; // inicia o estado dos objetos\n  } // colocando index:0 será responsavel por exibir um pokemon por vez (i estado inicial sao todos pokemons)\n\n\n  filterPokemons(filteredType) {\n    // esta funçao será responsável por fazer o filtro\n    this.setState({\n      filteredType,\n      pokemonIndex: 0\n    }); // setState = This is the primary method you use to update the user interface\n  } // essa função será usada para renderizar as mudanças ativadas pelo evento do usuário na interface\n\n\n  nextPokemon(numberOfPokemons) {\n    // essa é a função de inicio para passar os pokemons no clique\n    this.setState(state => ({\n      // state = previousState\n      pokemonIndex: (state.pokemonIndex + 1) % numberOfPokemons\n    })); // esta atribuição será responsável por passar pelos pokemons da lista\n  }\n\n  fetchFilteredPokemons() {\n    const {\n      pokemons\n    } = this.props;\n    const {\n      filteredType\n    } = this.state;\n    return pokemons.filter(pokemon => {\n      if (filteredType === 'all') return true;\n      return pokemon.type === filteredType;\n    });\n  }\n\n  fetchPokemonTypes() {\n    const {\n      pokemons\n    } = this.props;\n    return [...new Set(pokemons.reduce((types, {\n      type\n    }) => [...types, type], []))];\n  }\n\n  render() {\n    const filteredPokemons = this.fetchFilteredPokemons();\n    const pokemonTypes = this.fetchPokemonTypes();\n    const pokemon = filteredPokemons[this.state.pokemonIndex]; // inicia um pokemon de cada vez (recebe o estado inicial)\n\n    return (\n      /*#__PURE__*/\n      // Pokemon é componente criado em Pokemon.js que vai receber como propriedade o estado inicial do index(pokemonIdex:0)\n      _jsxDEV(\"div\", {\n        className: \"pokedex\",\n        children: [/*#__PURE__*/_jsxDEV(Pokemon, {\n          pokemon: pokemon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pokedex-buttons-panel\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => this.filterPokemons('all'),\n            className: \"filter-button\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this), pokemonTypes.map(type =>\n          /*#__PURE__*/\n          // se tivesse usado so a funçao map normal aqui sem o filtro iria mostrar a lista toda\n          _jsxDEV(Button, {\n            onClick: () => this.filterPokemons(type) // aqui o map vai receber dentro dele a funçao de filtro\n            ,\n            className: \"filter-button\",\n            children: type\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"pokedex-button\" // os pokemons serão filtrados de acordo com o tipo aqui tambem ou em all pokemons\n          ,\n          onClick: () => this.nextPokemon(filteredPokemons.length),\n          children: \"Pr\\xF3ximo pok\\xE9mon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default Pokedex; // as funções filterPokemons, nextPokemon e fetchFilteredPokemons sao as responsaveis por fazer a lista passar por \n// um pokemon de cada vez","map":{"version":3,"sources":["/home/brenomatias/trybe-exercises/block12-react-components-states/dia_1/pokedex-with-state/src/Pokedex.js"],"names":["React","Pokemon","Button","Pokedex","Component","constructor","props","state","pokemonIndex","filteredType","filterPokemons","setState","nextPokemon","numberOfPokemons","fetchFilteredPokemons","pokemons","filter","pokemon","type","fetchPokemonTypes","Set","reduce","types","render","filteredPokemons","pokemonTypes","map","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pokemon from './Pokemon';\nimport Button from './Button';\nimport './pokedex.css';\n//The JavaScript this keyword refers to the object it belongs to.\n\nclass Pokedex extends React.Component { \n  constructor(props) { // Typically, in React constructors are only used for two purposes:\n    //Initializing local state by assigning an object to this.state.\n    //Binding event handler methods to an instance.\n    super(props); //  you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor\n    this.state = {pokemonIndex: 0, filteredType: 'all'}; // inicia o estado dos objetos\n  } // colocando index:0 será responsavel por exibir um pokemon por vez (i estado inicial sao todos pokemons)\n\n  filterPokemons(filteredType) { // esta funçao será responsável por fazer o filtro\n    this.setState({filteredType, pokemonIndex: 0}); // setState = This is the primary method you use to update the user interface\n  } // essa função será usada para renderizar as mudanças ativadas pelo evento do usuário na interface\n\n  nextPokemon(numberOfPokemons) { // essa é a função de inicio para passar os pokemons no clique\n    this.setState(state => ({ // state = previousState\n      pokemonIndex: (state.pokemonIndex + 1) % numberOfPokemons,\n    })); // esta atribuição será responsável por passar pelos pokemons da lista\n  }\n\n  fetchFilteredPokemons() {\n    const {pokemons} = this.props;\n    const {filteredType} = this.state;\n\n    return pokemons.filter(pokemon => {\n      if (filteredType === 'all') return true;\n      return pokemon.type === filteredType;\n    });\n  }\n\n  fetchPokemonTypes() {\n    const {pokemons} = this.props;\n\n    return [...new Set(pokemons.reduce((types, {type}) => [...types, type], []))];\n  }\n\n  render() {\n    const filteredPokemons = this.fetchFilteredPokemons();\n    const pokemonTypes = this.fetchPokemonTypes();\n    const pokemon = filteredPokemons[this.state.pokemonIndex]; // inicia um pokemon de cada vez (recebe o estado inicial)\n\n    return ( // Pokemon é componente criado em Pokemon.js que vai receber como propriedade o estado inicial do index(pokemonIdex:0)\n      <div className=\"pokedex\">\n        <Pokemon pokemon={pokemon} /> \n        <div className=\"pokedex-buttons-panel\"> \n          <Button\n            onClick={() => this.filterPokemons('all')}\n            className=\"filter-button\">\n            All\n          </Button>\n          {pokemonTypes.map(type => ( // se tivesse usado so a funçao map normal aqui sem o filtro iria mostrar a lista toda\n            <Button\n              key={type}\n              onClick={() => this.filterPokemons(type)} // aqui o map vai receber dentro dele a funçao de filtro\n              className=\"filter-button\">\n              {type}  \n            </Button>\n          ))} \n        </div>\n        <Button\n          className=\"pokedex-button\" // os pokemons serão filtrados de acordo com o tipo aqui tambem ou em all pokemons\n          onClick={() => this.nextPokemon(filteredPokemons.length)}>\n          Próximo pokémon\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n\n\n// as funções filterPokemons, nextPokemon e fetchFilteredPokemons sao as responsaveis por fazer a lista passar por \n// um pokemon de cada vez"]},"metadata":{},"sourceType":"module"}